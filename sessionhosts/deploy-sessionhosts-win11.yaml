trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  - group: "Credentials"

parameters:
  - name: deploymentType
    displayName: "Select the deployment type"
    type: string
    default: "sub"
    values:
      - tenant
      - mg
      - sub
      - group

  - name: subscriptionId
    displayName: "Azure Subscription"
    type: string
    default: ""

  - name: productType
    displayName: "Select the product type"
    type: string
    default: "avd"
    values:
      - avd

  - name: environmentType
    displayName: "Select the environment"
    type: string
    values:
      - prod
      - acc
      - dev
      - test

  - name: location
    displayName: "Select the location"
    type: string
    default: "westeurope"
    values:
      - westeurope
      - northeurope

  - name: vmCount
    displayName: "Number of VMs to Create"
    type: string
    default: 1

  - name: avdSize
    displayName: "Size of the AVD VM"
    type: string
    default: "Standard_D2s_v3"

stages:
  - stage: DeployAndConfigureSessionHosts
    displayName: "Deploy and Configure sessionhosts"
    jobs:
      - job: BuildAndConfigureVMs
        displayName: "Build and Configure sessionhosts"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: AzureCLI@2
            displayName: "Create and Configure sessionhosts"
            inputs:
              azureSubscription: "AVDPipelines"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                # Login to Azure
                az login --service-principal --username $(AVDPipelines) --password $(Secret) --tenant $(tenantId)
                if [ $? -ne 0 ]; then
                  echo "Azure login failed. Please check the service principal credentials."
                  exit 1
                fi
                echo "Azure login successful."

                # Ensure the Azure CLI is up to date
                echo "Updating Azure CLI..."
                az upgrade --yes

                # Check if the desktopvirtualization extension is installed
                if ! az extension show --name desktopvirtualization &>/dev/null; then
                  echo "Installing 'desktopvirtualization' extension..."
                  az extension add --name desktopvirtualization
                else
                  echo "'desktopvirtualization' extension is already installed."
                fi

                # Define resource group and other parameters
                locationShortCode=""
                case "${{ parameters.location }}" in
                  "westeurope") locationShortCode="weu" ;;
                  "northeurope") locationShortCode="neu" ;;
                  *) echo "Unknown location: ${{ parameters.location }}"; exit 1 ;;
                esac

                resourceGroupName="rg-${{ parameters.productType }}-${{ parameters.environmentType }}-${locationShortCode}"
                sigImageVersion=$(az sig image-version list \
                  --resource-group $resourceGroupName \
                  --gallery-name "gal${{ parameters.productType }}${{ parameters.environmentType }}${locationShortCode}" \
                  --gallery-image-definition "img-${{ parameters.productType }}-${{ parameters.environmentType }}-${locationShortCode}" \
                  --query "[].{Version:name}" -o tsv | sort -V | tail -n 1)
                if [[ -z "$sigImageVersion" ]]; then
                  echo "Error: Could not find the latest image version."
                  exit 1
                fi

                username="adm_installuser"
                vmCount=${{ parameters.vmCount }}
               

                for i in $(seq 1 $vmCount); do
                  vmIndex=1
                  while true; do
                    vmname="avd-${{ parameters.environmentType }}-$(printf "%02d" $vmIndex)"
                    existingVM=$(az vm list --resource-group $resourceGroupName --query "[?name=='$vmname']" -o tsv)
                    if [[ -z "$existingVM" ]]; then
                      break
                    else
                      ((vmIndex++))
                    fi
                  done

                  nicName="nic-$vmname"

                  # Get the Subnet Resource ID
                  subnetId=$(az network vnet subnet show \
                      --resource-group $resourceGroupName \
                      --vnet-name "vnet-${{ parameters.productType }}-${{ parameters.environmentType }}-${locationShortCode}" \
                      --name "snet-${{ parameters.productType }}" \
                      --query id -o tsv)

                  echo $subnetId

                  az network nic create \
                  --resource-group $resourceGroupName \
                  --name $nicName \
                  --subnet $subnetId \
                  --accelerated-networking true \
                  --vnet-name "vnet-${{ parameters.productType }}-${{ parameters.environmentType }}-${locationShortCode}"

                  # Create the VM
                  az vm create \
                    --resource-group $resourceGroupName \
                    --name $vmname \
                    --image "/subscriptions/${{ parameters.subscriptionId }}/resourceGroups/${resourceGroupName}/providers/Microsoft.Compute/galleries/gal${{ parameters.productType }}${{ parameters.environmentType }}${locationShortCode}/images/img-${{ parameters.productType }}-${{ parameters.environmentType }}-${locationShortCode}/versions/$sigImageVersion" \
                    --admin-username $username \
                    --size ${{ parameters.avdSize }} \
                    --authentication-type password \
                    --admin-password $(ADMIN_PASSWORD) \
                    --security-type TrustedLaunch \
                    --public-ip-address "" \
                    --license-type Windows_Server \
                    --nsg-rule None \
                    --nics $nicName \
                    --availability-set "avail-${{ parameters.productType }}-${{ parameters.environmentType }}-${locationShortCode}"

                  echo "VM '$vmname' created successfully."

                  # Install AVD Agent and Bootloader
                  echo "Installing AVD Agent & Bootloader on $vmname..."
                  az vm run-command invoke \
                    --command-id RunPowerShellScript \
                    --name $vmname \
                    --resource-group $resourceGroupName \
                    --scripts "
                      [System.Collections.Generic.List[string]]\$uris = @(
                        'https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RWrmXv',
                        'https://res.cdn.office.net/s01-remote-desktop-agent/c6f347d6-61da-413b-8e42-f402355cb005/Microsoft.RDInfra.RDAgentBootLoader.Installer-x64-1.0.9023.1100.msi'
                      );
                      \$installers = @();
                      \$outputDir = 'C:\\Downloads';
                      if (-not (Test-Path \$outputDir)) {
                          New-Item -ItemType Directory -Path \$outputDir;
                      }
                      foreach (\$uri in \$uris) {
                          \$download = Invoke-WebRequest -Uri \$uri -UseBasicParsing;
                          \$fileName = (\$download.Headers['Content-Disposition'] -split '=' | Select-Object -Last 1) -replace '\"', '';
                          if (-not \$fileName) { \$fileName = [System.IO.Path]::GetFileName(\$uri) };
                          \$outputPath = Join-Path -Path \$outputDir -ChildPath \$fileName;
                          [System.IO.File]::WriteAllBytes(\$outputPath, \$download.Content);
                          \$installers += \$outputPath;
                      }
                      foreach (\$installer in \$installers) {
                          Unblock-File -Path \$installer;
                          Start-Process 'msiexec.exe' -ArgumentList '/i', \$installer, '/quiet' -Wait;
                      }"
                  echo "AVD Agent & Bootloader installation completed on $vmname."

                  # Generate Registration Key for Host Pool
                  echo "Generating registration key for Host Pool..."
                  hostPoolName="vdpool-${{ parameters.productType }}-${{ parameters.environmentType }}-${locationShortCode}"
                  registrationKeyJson=$(az desktopvirtualization hostpool retrieve-registration-token \
                    --resource-group $resourceGroupName \
                    --name $hostPoolName -o json)

                  # Extract only the registration token from the JSON response
                  registrationKey=$(echo $registrationKeyJson | jq -r '.token')

                  # Verify that we have the token
                  if [[ -z "$registrationKey" ]]; then
                    echo "Error: Registration key is missing. Cannot proceed."
                    exit 1
                  fi

                  echo "Full response received: $registrationKeyJson"
                  echo "Adding registration key to virtual machine..."

                  # Use the RunPowerShellScript command to register the VM
                  az vm run-command invoke \
                    --command-id RunPowerShellScript \
                    --name $vmname \
                    --resource-group $resourceGroupName \
                    --scripts "
                      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\RDInfraAgent' -Name 'IsRegistered' -Value 0 -Force
                      Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\RDInfraAgent' -Name 'RegistrationToken' -Value \"$registrationKey\" -Force
                      Restart-Computer -Force
                    "

                  echo "VM $vmname is registered to host pool $hostPoolName."
                done
                
  - stage: JoinVMToDomain
    displayName: "Join VM to Domain"
    jobs:
      - job: JoinVMToDomainJob
        displayName: "Join VM to Active Directory Domain"
        pool:
          vmImage: "windows-latest"
        steps:
          - task: PowerShell@2
            inputs:
              azureSubscription: "AVDPipelines"
              targetType: 'inline'
              script: |
                Install-Module -Name Az.Accounts -Force -Scope CurrentUser -AllowClobber
                Install-Module -Name Az.Compute -Force -Scope CurrentUser -AllowClobber
                Import-Module Az.Accounts
                import-module Az.Compute
               
                # Connect to Azure Account
                $passwd = ConvertTo-SecureString $(Secret) -AsPlainText -Force
                $pscredential = New-Object System.Management.Automation.PSCredential('$(AVDPipelines)', $passwd)
                Connect-AzAccount -ServicePrincipal -Credential $pscredential -Tenant $(tenantId)
                
                # Set the Azure subscription context
                Set-AzContext -Subscription "$(subscriptionID)"

                # Define credentials securely
                $domainusername = "$(Domain_UserName)"
                $domainpassword = ConvertTo-SecureString $(Domain_PassWord) -Force -AsPlainText
               
                # Creating the credentials object
                $domaincredential = New-Object System.Management.Automation.PSCredential('$(Domain_UserName)', $domainpassword)

                # Define resource group and other parameters
                $locationShortCode = ""

                # Ensure $location is correctly referenced
                $location = "${{ parameters.location }}"  # Ensure this resolves correctly from parameters

                switch ($location) {
                    "westeurope" { $locationShortCode = "weu" }
                    "northeurope" { $locationShortCode = "neu" }
                    default { 
                        Write-Host "Unknown location: $location"
                        exit 1
                    }
                }
                
                # Define parameters
                $DomainName = "$(Domain_Name)"
                $ResourceGroup = "rg-${{ parameters.productType }}-${{ parameters.environmentType }}-${locationShortCode}"
                $Name = 'DomainJoin'
                $TimeLimit = (Get-Date).AddMinutes(-30)  # Define the time limit as 30 minutes ago

                # Get the list of all VMs in the specified resource group
                $vms = Get-AzVM -ResourceGroupName $ResourceGroup

                # Filter VMs that were created within the last 30 minutes
                $recentVms = $vms | Where-Object {
                    $_.TimeCreated -gt $TimeLimit
                }

                # Extract the VM names
                $recentVmNames = $recentVms | Select-Object -ExpandProperty Name

                Write-Host "These are the newly created VMs: $($recentVmNames -join ', ')."

                # Check if there are any recent VMs
                if ($recentVms.Count -gt 0) {
                    foreach ($vm in $recentVms) {
                        $VMName = $vm.Name
                        Write-Host "Testing connectivity to check for an active domain with name $DomainName from VM ${VMName}."

                        try {
                            # Run Test-NetConnection on the VM using Azure Run Command
                            $script = @"
                Test-NetConnection -ComputerName '$DomainName' -Port 3389 -InformationLevel Detailed
                "@
                            $result = Invoke-AzVMRunCommand -ResourceGroupName $ResourceGroup -VMName $VMName -CommandId 'RunPowerShellScript' -ScriptString $script

                            # Check the result
                            if ($result.Value[0].Message -match 'TcpTestSucceeded\s+:\s+True') {
                                Write-Host "VM ${VMName} can connect to the domain $DomainName on port 3389."
                                Write-Host "Joining VM ${VMName} to the domain."

                                try {
                                    # Join the VM to the Azure AD DS domain
                                    Set-AzVMADDomainExtension -DomainName $DomainName -Credential $domaincredential -ResourceGroupName $ResourceGroup -VMName $VMName -Name $Name -JoinOption 0x00000003 -Restart -Verbose
                                    Write-Host "VM ${VMName} successfully joined to the domain."
                                } catch {
                                    Write-Host "Failed to join VM ${VMName} to the domain: $($_.Exception.Message)"
                                }
                            } else {
                                Write-Host "VM ${VMName} cannot connect to the domain $DomainName on port 3389. Skipping domain join."
                            }
                        } catch {
                            Write-Host "An error occurred while testing connectivity from VM ${VMName}: $($_.Exception.Message)"
                        }
                    }
                } else {
                    Write-Host "No VMs created within the last 30 minutes in resource group $ResourceGroup."
                }



  
